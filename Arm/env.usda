#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.7701232441693329, -1.049979240852535, 2.686224084484012)
                double3 target = (0.6875401966488848, -1.1196863802468684, 2.514689915498559)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./env.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            bool "rtx:ambientOcclusion:enabled" = 0
            bool "rtx:reflections:enabled" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (-1.870047093004911, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def "thor_table" (
        prepend payload = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Props/Mounts/thor_table.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.5496044959611754, -1.6835925936340812, 0.8132565513870669)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Realsense" (
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Sensors/Intel/RealSense/rsd455.usd@
    )
    {
        quatd xformOp:orient = (0.7071067811865476, 0, 0.7071067811865475, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.9244543584413136, -1.691611661269892, 2.343278461644804)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "RSD455"
        {
            bool physics:rigidBodyEnabled = 0
            bool physxRigidBody:disableGravity = 1
        }
    }

    def "Franka" (
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Robots/Franka/franka.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.5496044959611754, -1.6835925936340812, 0.8149225405482367)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "panda_hand"
        {
            over "geometry"
            {
                over "panda_hand"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "panda_finger_joint1"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "panda_finger_joint2"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Franka/Realsense_01/RSD455>
                rel physics:body1 = </World/Franka/panda_hand>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.06288765, -0.004751125, -0.030277997)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.70710677, 8.5252594e-8, -0.70710677, -7.7690544e-8)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        over "panda_link0"
        {
            over "panda_joint1"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "geometry"
            {
                over "panda_link0"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        over "panda_link1"
        {
            over "panda_joint2"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link2"
        {
            over "panda_joint3"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link3"
        {
            over "panda_joint4"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link4"
        {
            over "panda_joint5"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link5"
        {
            over "panda_joint6"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link6"
        {
            over "panda_joint7"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "panda_link7"
        {
        }

        over "panda_link8"
        {
        }

        over "panda_leftfinger"
        {
        }

        over "panda_rightfinger"
        {
        }

        over "rootJoint"
        {
            point3f physics:localPos1 = (-0.3204426, -1.6835926, 0.8149226)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def Xform "Realsense_01" (
            prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Sensors/Intel/RealSense/rsd455.usd@
        )
        {
            quatd xformOp:orient = (0.6532814824381883, -0.2705980500730985, 0.6532814824381882, 0.27059805007309856)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.1127692941929691, 0.018050140653173452, 0.8631122568413224)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "RSD455"
            {
                over "Camera_Pseudo_Depth"
                {
                    custom string isaac:nameOverride = "realsense_hand_depth" (
                        displayName = "Name Override"
                        doc = "Name override for prim lookup in base name search"
                    )
                }

                over "Camera_OmniVision_OV9782_Color"
                {
                    custom string isaac:nameOverride = "realsense_hand_rgb" (
                        displayName = "Name Override"
                        doc = "Name override for prim lookup in base name search"
                    )
                }

                over "Imu_Sensor"
                {
                    custom string isaac:nameOverride = "realsense_hand_imu" (
                        displayName = "Name Override"
                        doc = "Name override for prim lookup in base name search"
                    )
                }
            }
        }
    }

    def "nvidia_cube" (
        prepend payload = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Props/Blocks/nvidia_cube.usd@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (1.998635060623392, -1.6835925936340812, 0.8330664280808014)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "S_NvidiaCube"
        {
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (0.012999999, 0.012999999, 0.012999999)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }
    }

    def PhysicsFixedJoint "PandaTableJoint"
    {
        rel physics:body0 = </World/Franka/panda_link0>
        rel physics:body1 = </World/thor_table/Thor_table>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        point3f physics:localPos0 = (2.3841857e-9, -2.9802322e-10, -0.8149226)
        point3f physics:localPos1 = (0, 0, -0.81325656)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
    }

    def Xform "sm_warehouse_a01_h10m_cornerinmirror_01" (
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Modular_Warehouse/Props/Source/sm_warehouse_a01_h10m_cornerinmirror_01.usd@
    )
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (0.32000000000192785, 0.32000000000192785, 0.32000000000192785)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def OmniGraph "intel_realsense_hand"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "isaac_create_render_product" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom rel inputs:cameraPrim = </World/Franka/Realsense_01/RSD455/Camera_Pseudo_Depth> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/on_playback_tick.outputs:tick>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "isaacsim.core.nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-233.58131, -748.74243)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (-210.52086, -481.46854)
        }

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-578.4832, -200.67218)
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (-94.98039, -64.42702)
        }

        def OmniGraphNode "isaac_read_imu_node" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/on_playback_tick.outputs:tick>
            custom rel inputs:imuPrim = </World/Franka/Realsense_01/RSD455/Imu_Sensor> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:readGravity
            custom bool inputs:useLatestData = 0
            token node:type = "isaacsim.sensors.physics.IsaacReadIMU"
            int node:typeVersion = 1
            custom vector3d outputs:angVel
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linAcc
            custom quatd outputs:orientation
            custom float outputs:sensorTime
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (-92.8808, -265.98114)
        }

        def OmniGraphNode "ros2_camera_helper" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/intel_realsense_hand/ros2_context.outputs:context>
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/isaac_create_render_product.outputs:execOut>
            custom string inputs:frameId = "realsense_hand_depth"
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "realsense_hand"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/intel_realsense_hand/isaac_create_render_product.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName = "camera_info"
            custom token inputs:type = "camera_info" (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "isaacsim.ros2.bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (143.85756, -750.2887)
        }

        def OmniGraphNode "ros2_camera_helper_04" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/intel_realsense_hand/ros2_context.outputs:context>
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/isaac_create_render_product.outputs:execOut>
            custom string inputs:frameId = "realsense_hand_depth"
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "realsense_hand"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/intel_realsense_hand/isaac_create_render_product.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName = "depth"
            custom token inputs:type = "depth" (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "isaacsim.ros2.bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (151.58221, -580.0187)
        }

        def OmniGraphNode "isaac_create_render_product_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom rel inputs:cameraPrim = </World/Franka/Realsense_01/RSD455/Camera_Pseudo_Depth> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/on_playback_tick.outputs:tick>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "isaacsim.core.nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-258.1534, 198.81021)
        }

        def OmniGraphNode "ros2_camera_helper_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/intel_realsense_hand/ros2_context_01.outputs:context>
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/isaac_create_render_product_01.outputs:execOut>
            custom string inputs:frameId = "realsense_hand_rgb"
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "realsense_hand"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/intel_realsense_hand/isaac_create_render_product_01.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName = "camera_info"
            custom token inputs:type = "camera_info" (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "isaacsim.ros2.bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (131.74548, 189.71259)
        }

        def OmniGraphNode "ros2_context_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-227.52557, 407.2116)
        }

        def OmniGraphNode "ros2_camera_helper_02" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/intel_realsense_hand/ros2_context_01.outputs:context>
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/isaac_create_render_product_01.outputs:execOut>
            custom string inputs:frameId = "realsense_hand_rgb"
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "realsense_hand"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/intel_realsense_hand/isaac_create_render_product_01.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName = "rgb"
            custom token inputs:type = "rgb" (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "isaacsim.ros2.bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (134.1558, 348.9471)
        }

        def OmniGraphNode "ros2_publish_imu" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom vector3d inputs:angularVelocity
            prepend vector3d inputs:angularVelocity.connect = </World/intel_realsense_hand/isaac_read_imu_node.outputs:angVel>
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/intel_realsense_hand/ros2_context_02.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/intel_realsense_hand/isaac_read_imu_node.outputs:execOut>
            custom string inputs:frameId = "realsense_hand_imu"
            custom vector3d inputs:linearAcceleration
            prepend vector3d inputs:linearAcceleration.connect = </World/intel_realsense_hand/isaac_read_imu_node.outputs:linAcc>
            custom string inputs:nodeNamespace
            custom quatd inputs:orientation
            prepend quatd inputs:orientation.connect = </World/intel_realsense_hand/isaac_read_imu_node.outputs:orientation>
            custom bool inputs:publishAngularVelocity
            custom bool inputs:publishLinearAcceleration
            custom bool inputs:publishOrientation
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/intel_realsense_hand/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2PublishImu"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (221.90483, -190.80013)
        }

        def OmniGraphNode "ros2_context_02" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (-77.21186, 41.087498)
        }
    }

    def OmniGraph "Panda_publishers"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (154, 139)
        }

        def OmniGraphNode "ros2_subscribe_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/Panda_publishers/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (429, 111)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </World/Panda_publishers/ros2_subscribe_joint_state.outputs:effortCommand>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/Panda_publishers/ros2_subscribe_joint_state.outputs:execOut>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </World/Panda_publishers/ros2_subscribe_joint_state.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </World/Panda_publishers/ros2_subscribe_joint_state.outputs:positionCommand>
            custom string inputs:robotPath
            custom rel inputs:targetPrim = </World/Franka> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </World/Panda_publishers/ros2_subscribe_joint_state.outputs:velocityCommand>
            token node:type = "isaacsim.core.nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (732.7766, 130.20476)
        }

        def OmniGraphNode "ros2_publish_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/Panda_publishers/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace = "/panda"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </World/Franka> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/Panda_publishers/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName = "/joint_states"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishJointState"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (428.74878, 317.79562)
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (142.50107, 337.88144)
        }
    }

    def OmniGraph "ROS_CLOCK"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (194.75269, -824.92334)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (198.6235, -715.4185)
        }

        def OmniGraphNode "ros2_publish_clock" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </World/ROS_CLOCK/ros2_context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ROS_CLOCK/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ROS_CLOCK/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2PublishClock"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (512.1806, -905.8024)
        }

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (195.57994, -935.7663)
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def "Render" (
    hide_in_stage_window = true
    no_delete = true
)
{
    def "OmniverseKit"
    {
        def "HydraTextures" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            def RenderProduct "omni_kit_widget_viewport_ViewportTexture_0" (
                prepend apiSchemas = ["OmniRtxSettingsCommonAdvancedAPI_1", "OmniRtxSettingsRtAdvancedAPI_1", "OmniRtxSettingsPtAdvancedAPI_1", "OmniRtxPostColorGradingAPI_1", "OmniRtxPostChromaticAberrationAPI_1", "OmniRtxPostBloomPhysicalAPI_1", "OmniRtxPostMatteObjectAPI_1", "OmniRtxPostCompositingAPI_1", "OmniRtxPostDofAPI_1", "OmniRtxPostMotionBlurAPI_1", "OmniRtxPostTvNoiseAPI_1", "OmniRtxPostTonemapIrayReinhardAPI_1", "OmniRtxPostDebugSettingsAPI_1", "OmniRtxDebugSettingsAPI_1"]
                hide_in_stage_window = true
                no_delete = true
            )
            {
                rel camera = </OmniverseKit_Persp>
                token omni:rtx:background:source:texture:textureMode = "repeatMirrored"
                token omni:rtx:background:source:type = "domeLight"
                bool omni:rtx:dlss:frameGeneration = 0
                string omni:rtx:material:db:rtSensorNameToIdMap = "DefaultMaterial:0;AsphaltStandardMaterial:1;AsphaltWeatheredMaterial:2;VegetationGrassMaterial:3;WaterStandardMaterial:4;GlassStandardMaterial:5;FiberGlassMaterial:6;MetalAlloyMaterial:7;MetalAluminumMaterial:8;MetalAluminumOxidizedMaterial:9;PlasticStandardMaterial:10;RetroMarkingsMaterial:11;RetroSignMaterial:12;RubberStandardMaterial:13;SoilClayMaterial:14;ConcreteRoughMaterial:15;ConcreteSmoothMaterial:16;OakTreeBarkMaterial:17;FabricStandardMaterial:18;PlexiGlassStandardMaterial:19;MetalSilverMaterial:20"
                bool omni:rtx:material:db:syncLoads = 1
                bool omni:rtx:post:registeredCompositing:invertColorCorrection = 1
                bool omni:rtx:post:registeredCompositing:invertToneMap = 1
                bool omni:rtx:pt:lightcache:cached:dontResolveConflicts = 1
                int omni:rtx:pt:maxSamplesPerLaunch = 2073600
                int omni:rtx:pt:mgpu:maxPixelsPerRegionExponent = 12
                color3f omni:rtx:rt:ambientLight:color = (0.1, 0.1, 0.1)
                bool omni:rtx:rt:demoire = 0
                bool omni:rtx:rt:ecoMode:enabled = 0
                bool omni:rtx:rt:lightcache:spatialCache:dontResolveConflicts = 1
                bool omni:rtx:scene:hydra:materialSyncLoads = 1
                bool omni:rtx:scene:hydra:mdlMaterialWarmup = 1
                uint omni:rtx:viewTile:limit = 4294967295
                rel orderedVars = </Render/Vars/LdrColor>
                custom bool overrideClipRange = 0
                uniform int2 resolution = (1280, 720)
            }
        }
    }

    def RenderSettings "OmniverseGlobalRenderSettings" (
        prepend apiSchemas = ["OmniRtxSettingsGlobalRtAdvancedAPI_1", "OmniRtxSettingsGlobalPtAdvancedAPI_1"]
        no_delete = true
    )
    {
        rel products = </Render/OmniverseKit/HydraTextures/omni_kit_widget_viewport_ViewportTexture_0>
    }

    def "Vars"
    {
        def RenderVar "LdrColor" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            uniform string sourceName = "LdrColor"
        }
    }
}

